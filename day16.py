test_input = "D2FE28" # literal 2021
test_input2 = "38006F45291200" # first example operator
test_input3 = "8A004A801A8002F478" # versions sum example 1
test_input4 = "620080001611562C8802118E34" # versions sum example 2
test_input5 = "C0015000016115A2E0802F182340" # versions sum example 3
test_input6 = "A0016C880162017C3686B18A3D4780" # versions sum example 4
puzzle_input

def parse(input):
    result = ''
    for i in range(0, len(input), 2):
        result += "{0:08b}".format(int(input[i:i+2], base=16))
    return result

parsed = parse(puzzle_input)

i = 0

def parse_version_typeid():
    global i
    version = int(parsed[i:i+3], base=2)
    typeid = int(parsed[i+3:i+6], base=2)
    i += 6
    return (version, typeid)

def read_literal():
    """
    when typeid==4
    """
    global i
    stacked = ''
    last_group = False
    while not last_group:
        last_group = (parsed[i] == '0')
        stacked += parsed[i+1:i+5]
        i += 5
    return int(stacked, base=2)

total_version = 0
while i < (len(parsed)-6):
    (version, typeid) = parse_version_typeid()
    if i >= len(parsed) - 1:
        break
    print(f"pos {i}: version {version}, typeid: {typeid}")
    total_version += version
    if typeid == 4:
        l = read_literal()
        print(f"literal {l}")
    else:
        length_type_id = parsed[i]
        i += 1
        if length_type_id == '0':
            total_sub_length = int(parsed[i:i+15], base=2)
            print(f"operator: total_sub_length={total_sub_length}")
            i += 15
        else:
            nb_sub_packets = int(parsed[i:i+11], base=2)
            print(f"operator: nb_sub_packets={nb_sub_packets}")
            i += 11

print(f"versions sum: {total_version}")
# phase 1: versions sum is 920
